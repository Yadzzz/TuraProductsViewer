@page "/creator"

@using System.Diagnostics
@using System.Text
@inject CreatorService CreatorService
@inject IJSRuntime JSRuntime
@inject ImageService ImageService
@inject PdfCreatorService PDFCreatorService
@inject NavisionDataRetriever.NavisionRetriever Navision
@inject ILogger<Creator> logger;


<div class="page-header">
    <div class="page-title">
        <h3>Creator Service</h3>
    </div>
</div>

<div class="row layout-top-spacing" id="cancel-row">
    <div class="col-xl-8 col-lg-8 col-sm-8  layout-spacing">
        <div class="widget-content widget-content-area br-6">
            <div class="table-responsive mt-4 mb-4">

                @if (this.inCreationProcess)
                {
                    <p>You cannot edit data when PDF Process is triggered. Please wait for the process to finish.</p>
                }
                else
                {
                    @if (CreatorService.GetProductsCount() == 0)
                    {
                        <p>No products in creator.</p>
                    }
                    else
                    {
                        <table id="example" class="table table-hover" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Price</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in CreatorService.GetProducts())
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex">
                                                <div class="usr-img-frame mr-2 rounded-circle">
                                                    @*<img alt="product" class="img-fluid rounded-circle" src="@ImageService.GetImagePath(product.VariantId)">*@
                                                    <img alt="product" class="img-fluid rounded-circle" src="@ImageService.GetWebImagePath(product.VariantId)">
                                                </div>
                                            </div>
                                        </td>
                                        <td>@product.VariantId</td>
                                        <td><input type="text" id="row-1-position" class="form-control" name="row-1-position" value="@product.GetItemName(CreatorService.Language)" @oninput="@((e) => { product.SetItemName(CreatorService.Language, (string)e.Value); })"></td>
                                        <td><input type="text" id="row-1-position" class="form-control" name="row-1-position" value="@this.CreatorService.GetPrice(product)" @oninput="@((e) => { product.SetSpecialCustomerEditedPrice((string)e.Value); })"></td>
                                        <td><button class="btn btn-primary mb-2" @onclick=@(() => removeProduct(product))>Remove</button></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Image</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Price</th>
                                    <th>Action</th>
                                </tr>
                            </tfoot>
                        </table>
                    }
                }
            </div>
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-sm-4  layout-spacing">
        <div class="widget-content widget-content-area br-4">
            <div class="widget-content">

                @if (this.inCreationProcess)
                {
                    <div class="loader mx-auto"></div>
                }
                else
                {
                    <div class="media">
                        <div class="media-body">
                            <h6>Creator Summary</h6>
                            <p class="meta-date-time">Total products: @CreatorService.GetProductsCount()</p>
                        </div>
                    </div>
                    <hr />

                    <div class="col-lg-6">
                        <form>
                            <p>Page Layout</p>

                            <div class="dropdown filter custom-dropdown-icon">
                                <a class="dropdown-toggle btn" href="#" role="button" id="filterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="text">@this.htmlLayout</span> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg></a>

                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterDropdown">
                                    <a class="dropdown-item" data-value="sixperpage" @onclick=@(() => this.htmlLayout = HtmlDesigner.HtmlLayout.SixPerPage)>6 / Page</a>
                                    <a class="dropdown-item" data-value="oneperpage" @onclick=@(() => this.htmlLayout = HtmlDesigner.HtmlLayout.OnePerPage)>1 / Page</a>
                                    <a class="dropdown-item" data-value="tenperpage" @onclick=@(() => this.htmlLayout = HtmlDesigner.HtmlLayout.TenPerPage)>10 / Page</a>
                                    <a class="dropdown-item" data-value="pricelabel" @onclick=@(() => this.htmlLayout = HtmlDesigner.HtmlLayout.PrisEtikett)>Price Label</a>
                                    <a class="dropdown-item" data-value="pinflag" @onclick=@(() => this.htmlLayout = HtmlDesigner.HtmlLayout.Pinnflaga)>Pin Flag</a>
                                </div>
                            </div>
                        </form>
                    </div>

                    <br />

                    <div class="col-lg-8">
                        <p>Page Title</p>
                        <input type="text" @bind-value=@this.title class="w-100 form-control product-search br-30" id="input-search" placeholder="Page Title">
                    </div>

                    <hr />

                    <div class="col-lg-12">
                        <div class="col-lg-12">
                            <input class="form-check-input" type="checkbox" id="gridCheck1" checked="@this.CreatorService.UsePackagingImage" @oninput="@((e) => { this.CreatorService.UsePackagingImage = (bool)e.Value; })">
                            <label class="form-check-label" for="gridCheck1">
                                Use Packaging Image
                            </label>
                        </div>
                        <div class="col-lg-12">
                            <input class="form-check-input" type="checkbox" id="gridCheck1" checked="@this.CreatorService.ShowInStock" @oninput="@((e) => { this.CreatorService.ShowInStock = (bool)e.Value; })">
                            <label class="form-check-label" for="gridCheck1">
                                Show In-stock Balanace
                            </label>
                        </div>
                        @if (this.CreatorService.ShowInStock)
                        {
                            <div class="col-lg-12">
                                <input class="form-check-input" type="checkbox" id="gridCheck1" checked="@this.CreatorService.ShowInStockCount" @oninput="@((e) => { this.CreatorService.ShowInStockCount = (bool)e.Value; })">
                                <label class="form-check-label" for="gridCheck1">
                                    Show Amount In-stock
                                </label>
                            </div>
                        }
                        <div class="col-lg-12">
                            <input class="form-check-input" type="checkbox" id="gridCheck1" checked="@this.CreatorService.ShowPackagingMeasurment" @oninput="@((e) => { this.CreatorService.ShowPackagingMeasurment = (bool)e.Value; })">
                            <label class="form-check-label" for="gridCheck1">
                                Show Packaging Size
                            </label>
                        </div>
                    </div>

                    <hr />

                    <div class="dropdown filter custom-dropdown-icon">
                        <a class="dropdown-toggle btn" href="#" role="button" id="filterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="text">@this.CreatorService.PriceType.ToString()</span> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg></a>

                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterDropdown">
                            <a class="dropdown-item" data-value="Rek" @onclick="(() => this.CreatorService.PriceType = PriceType.Rek)">Rek</a>
                            <a class="dropdown-item" data-value="Netto" @onclick="(() => this.CreatorService.PriceType = PriceType.Netto)">Netto</a>
                            <a class="dropdown-item" data-value="Rek & Netto" @onclick="(() => this.CreatorService.PriceType = PriceType.RekNetto)">Rek & Netto</a>
                            <a class="dropdown-item" data-value="Kund" @onclick="(() => this.CreatorService.PriceType = PriceType.Kund)">Kund</a>
                            <a class="dropdown-item" data-value="Kund & Rek" @onclick="(() => this.CreatorService.PriceType = PriceType.KundRek)">Kund & Rek</a>
                            <a class="dropdown-item" data-value="None" @onclick="(() => this.CreatorService.PriceType = PriceType.None)">None</a>
                        </div>
                    </div>

                    <br />

                    if (this.CreatorService.PriceType == PriceType.Kund || this.CreatorService.PriceType == PriceType.KundRek)
                    {
                        @*<div class="col-lg-8">
                <p>Customer Id</p>
                <input type="text" @bind-value=@this.CreatorService.CustomerId class="w-100 form-control product-search br-30" id="input-search" placeholder="Customer Id">
                </div>
                <br />
                <div class="col-lg-12">
                <button class="btn btn-primary mb-2" type="button" @onclick=@getCustomerPrices>Get Prices</button>
                </div>*@

                        <div class="col-lg-6" style="float:left">
                            <input type="text" @bind-value=@this.CreatorService.CustomerId class="w-100 form-control product-search br-30" id="input-search" placeholder="Customer Id">
                        </div>

                        <div class="col-lg-4 col-md-2 col-sm-2" style="float:left">
                            <button class="btn btn-outline-primary btn-rounded mb-2" type="button" @onclick=@getCustomerPrices>Get Prices</button>
                        </div>
                        @*<div class="col-lg-4 col-md-2 col-sm-2" style="float:left">
                <button class="btn btn-outline-primary btn-rounded mb-2" type="button" @onclick=@clearCustomerPrices>Clear Prices</button>
                </div>
                *@
                        <br />

                        <br />
                    }

                    <hr />

                    @if (CreatorService.GetProductsCount() > 0)
                    {
                        <button class="btn btn-primary mb-2" type="button" @onclick=@createHTML>Create HTML</button>
                        <button class="btn btn-primary mb-2" type="button" @onclick=@initializePDFCreation>Create PDF</button>
                        <hr />
                        <button class="btn btn-secondary mb-2 col-12" type="button" @onclick=@this.onClearProducts>Clear Products</button>
                    }
                    else
                    {
                        <button class="btn btn-primary mb-2" type="button" disabled>Create HTML</button>
                        <button class="btn btn-primary mb-2" type="button" disabled>Create PDF</button>
                        <hr />
                        <button class="btn btn-secondary mb-2 col-12" type="button" disabled>Clear Products</button>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string title { get; set; } = "Tura Scandinavia";
    private bool inCreationProcess { get; set; } = false;
    private HtmlDesigner.HtmlLayout htmlLayout { get; set; } = HtmlDesigner.HtmlLayout.SixPerPage;

    /// <summary>
    /// Removes given product from Creator Service
    /// </summary>
    private void removeProduct(DataRetriever.Models.ProductsDataModel product)
    {
        CreatorService.RemoveProduct(product);
    }

    private void onClearProducts()
    {
        CreatorService.ClearProducts();
    }

    private async void initializePDFCreation()
    {
        //if (this.CreatorService.PriceType == PriceType.Kund || this.CreatorService.PriceType == PriceType.KundRek)
        //{
        //    this.getCustomerPrices();
        //}

        this.inCreationProcess = true;
        await Task.Run(() => this.createPDF());
        this.inCreationProcess = false;
        this.StateHasChanged();
    }

    private async Task createPDF()
    {
        HtmlDesigner.HtmlBuilder htmlBuilder = new HtmlDesigner.HtmlBuilder(this.title, this.htmlLayout, this.CreatorService, this.ImageService, false);

        if (this.htmlLayout == HtmlDesigner.HtmlLayout.OnePerPage && this.CreatorService.GetProductsCount() > 5)
        {
            using (MemoryStream? excelStream = htmlBuilder.GenerateMemoryStream())
            {
                if (excelStream != null)
                {
                    await JSRuntime.InvokeAsync<object>(
                           "saveAsFileee",
                           (this.title + ".pdf"),
                           Convert.ToBase64String(excelStream.ToArray()));
                }
                else
                {
                    this.logger.LogError("Could not create PDF [Method: CreatePDF, File:Creator.Razor]");
                }
            }
        }
        else if (this.htmlLayout == HtmlDesigner.HtmlLayout.SixPerPage && this.CreatorService.GetProductsCount() > 30)
        {
            using (MemoryStream? excelStream = htmlBuilder.GenerateMemoryStream())
            {
                if (excelStream != null)
                {
                    await JSRuntime.InvokeAsync<object>(
                               "saveAsFileee",
                               (this.title + ".pdf"),
                               Convert.ToBase64String(excelStream.ToArray()));
                }
                else
                {
                    this.logger.LogError("Could not create PDF [Method: CreatePDF, File:Creator.Razor]");
                }
            }
        }
        else if(this.htmlLayout == HtmlDesigner.HtmlLayout.OnePerPage && this.CreatorService.GetProductsCount() > 50)
        {
            using (MemoryStream? excelStream = htmlBuilder.GenerateMemoryStream())
            {
                if (excelStream != null)
                {
                    await JSRuntime.InvokeAsync<object>(
                               "saveAsFileee",
                               (this.title + ".pdf"),
                               Convert.ToBase64String(excelStream.ToArray()));
                }
                else
                {
                    this.logger.LogError("Could not create PDF [Method: CreatePDF, File:Creator.Razor]");
                }
            }
        }
        else if(this.htmlLayout == HtmlDesigner.HtmlLayout.PrisEtikett)
        {
            using (MemoryStream? excelStream = htmlBuilder.GenerateMemoryStream())
            {
                if (excelStream != null)
                {
                    await JSRuntime.InvokeAsync<object>(
                               "saveAsFileee",
                               (this.title + ".pdf"),
                               Convert.ToBase64String(excelStream.ToArray()));
                }
                else
                {
                    this.logger.LogError("Could not create PDF [Method: CreatePDF, File:Creator.Razor]");
                }
            }
        }
        else
        {
            using (MemoryStream? excelStream = PDFCreatorService.GetPDFStream(htmlBuilder.GenerateHTML(), this.title, this.CreatorService.Language))
            {
                if (excelStream != null)
                {
                    await JSRuntime.InvokeAsync<object>(
                               "saveAsFileee",
                               (this.title + ".pdf"),
                               Convert.ToBase64String(excelStream.ToArray()));
                }
                else
                {
                    this.logger.LogError("Could not create PDF [Method: CreatePDF, File:Creator.Razor]");
                }
            }
        }
        //var bytes = System.Text.Encoding.UTF8.GetBytes("test");
        //Task.Run(() => this.SaveAsPDF(JSRuntime, "Offer.pdf", bytes, FileService.GenerateHTML(CreatorService)));
    }

    public async Task SaveAsPDF(IJSRuntime js, string filename, byte[] data, string d)
    {
        await js.InvokeAsync<object>(
            "generatePDFFF", d);
    }

    private void createHTML()
    {
        //if (this.CreatorService.PriceType == PriceType.Kund || this.CreatorService.PriceType == PriceType.KundRek)
        //{
        //    this.getCustomerPrices();
        //}

        this.DownloadHTMLFile();
    }

    private void DownloadHTMLFile()
    {
        HtmlDesigner.HtmlBuilder htmlBuilder = new HtmlDesigner.HtmlBuilder(this.title, this.htmlLayout, this.CreatorService, this.ImageService, true);
        var bytes = System.Text.Encoding.UTF8.GetBytes(htmlBuilder.GenerateHTML());

        //var bytes = System.Text.Encoding.UTF8.GetBytes(FileService.HTML(CreatorService, ImageService, true));
        Task.Run(() => this.SaveAs(JSRuntime, (this.title + ".html"), bytes));
    }

    public async Task SaveAs(IJSRuntime js, string filename, byte[] data)
    {
        await js.InvokeAsync<object>(
            "saveAsFile",
            filename,
            Convert.ToBase64String(data));
    }

    /// <summary>
    /// Gets customer prices from Web Service and adds them to an Dictionary in CreatorService
    /// </summary>
    private void getCustomerPrices()
    {
        if (CreatorService.SpecialCustomerPrices != null && CreatorService.SpecialCustomerPrices.Count > 0)
        {
            this.CreatorService.SpecialCustomerPrices.Clear();
        }

        List<string> ids = new List<string>();

        foreach (var product in this.CreatorService.GetProducts())
        {
            if (ids.Contains(product.VariantId))
            {
                continue;
            }

            ids.Add(product.VariantId);
        }

        if (this.CreatorService.CustomerId != null || this.CreatorService.CustomerId != string.Empty)
        {
            Navision.PrepareRequest(ids.ToArray(), this.CreatorService.CustomerId, this.CreatorService.CurrencyCode);
            var data = Navision.GetPrices();

            if (data != null)
            {
                this.CreatorService.SpecialCustomerPrices = data;

                //foreach (var v in data)
                //{
                //    Console.WriteLine(v.Key + " : " + v.Value);
                //}

                this.StateHasChanged();
            }
            else
            {
                //Console.WriteLine("NULL");
            }
        }
    }

    /// <summary>
    /// Clears all customer prices fetched from Web Service
    /// </summary>
    private void clearCustomerPrices()
    {
        if (CreatorService.SpecialCustomerPrices != null && CreatorService.SpecialCustomerPrices.Count > 0)
        {
            this.CreatorService.SpecialCustomerPrices.Clear();
        }
    }
}
