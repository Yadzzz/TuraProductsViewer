@page "/creator"

@using System.Diagnostics
@using System.Text
@inject CreatorService CreatorService
@inject IJSRuntime JSRuntime
@inject FileCreatorService FileService
@inject ImageService ImageService

<div class="page-header">
    <div class="page-title">
        <h3>Creator Service</h3>
    </div>
</div>

@*<div class="row layout-top-spacing" id="cancel-row">
    <div class="col-xl-8 col-lg-8 col-sm-8  layout-spacing">
        <div class="widget-content widget-content-area br-6">
            <div class="table-responsive mb-4 mt-4">

                @if (CreatorService.GetProductsCount() == 0)
                {
                    <p>No products in creator.</p>
                }
                else
                {
                    <table id="multi-column-ordering" class="table table-hover" style="width:100%">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var product in CreatorService.GetProducts())
                            {

                                <tr>
                                    <td>
                                        <div class="d-flex">
                                            <div class="usr-img-frame mr-2 rounded-circle">
                                                <img alt="avatar" class="img-fluid rounded-circle" src="assets/img/90x90.jpg">
                                            </div>
                                            <p class="align-self-center mb-0 admin-name"> </p>
                                        </div>
                                    </td>
                                    <td>@product.VariantId</td>
                                    <td>@product.GetItemName(CreatorService.Language)</td>
                                    <button class="btn btn-primary mb-2" @onclick=@(() => removeProduct(product))>Remove</button>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-sm-4  layout-spacing">
        <div class="widget-content widget-content-area br-4">
            <div class="widget-content">

                <div class="media">
                    <div class="media-body">
                        <h6>Creator Summary</h6>
                        <p class="meta-date-time">Total products: @CreatorService.GetProductsCount()</p>
                    </div>
                </div>
                <hr />
                <form>
                    <p>Page Layout</p>

                    <div class="dropdown filter custom-dropdown-icon">
                        <a class="dropdown-toggle btn" href="#" role="button" id="filterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="text">Standard</span> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg></a>

                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterDropdown">
                            <a class="dropdown-item" data-value="Standard">Standard</a>
                            <a class="dropdown-item" data-value="Detailed">Detailed</a>
                            <a class="dropdown-item" data-value="Detailed">Fully Detailed</a>
                        </div>
                    </div>
                </form>
                <br />
                <button class="btn btn-primary mb-2" @onclick=@createPDF>Create PDF</button>
            </div>
        </div>
    </div>

</div>*@




<div class="row layout-top-spacing" id="cancel-row">
    <div class="col-xl-8 col-lg-8 col-sm-8  layout-spacing">
        <div class="widget-content widget-content-area br-6">
            <div class="table-responsive mt-4 mb-4">

                @if (CreatorService.GetProductsCount() == 0)
                {
                    <p>No products in creator.</p>
                }
                else
                {
                    <table id="example" class="table table-hover" style="width:100%">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Price</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in CreatorService.GetProducts())
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex">
                                            <div class="usr-img-frame mr-2 rounded-circle">
                                                <img alt="product" class="img-fluid rounded-circle" src="@ImageService.GetImagePath(product.VariantId)">
                                            </div>
                                        </div>
                                    </td>
                                    <td>@product.VariantId</td>
                                    <td><input type="text" id="row-1-position" class="form-control" name="row-1-position" value="@product.GetItemName(CreatorService.Language)" @oninput="@((e) => { product.SetItemName(CreatorService.Language, (string)e.Value); })"></td>
                                    <td><input type="text" id="row-1-position" class="form-control" name="row-1-position" value="@product.UnitPrice" @oninput="@((e) => { product.SetUnitPrice((string)e.Value); })"></td>
                                    <td><button class="btn btn-primary mb-2" @onclick=@(() => removeProduct(product))>Remove</button></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Price</th>
                                <th>Action</th>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-sm-4  layout-spacing">
        <div class="widget-content widget-content-area br-4">
            <div class="widget-content">

                <div class="media">
                    <div class="media-body">
                        <h6>Creator Summary</h6>
                        <p class="meta-date-time">Total products: @CreatorService.GetProductsCount()</p>
                    </div>
                </div>
                <hr />
                <form>
                    <p>Page Layout</p>

                    <div class="dropdown filter custom-dropdown-icon">
                        <a class="dropdown-toggle btn" href="#" role="button" id="filterDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="text">Standard</span> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg></a>

                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterDropdown">
                            <a class="dropdown-item" data-value="Standard">Standard</a>
                            <a class="dropdown-item" data-value="Detailed">Detailed</a>
                            <a class="dropdown-item" data-value="Fully-Detailed">Fully Detailed</a>
                        </div>
                    </div>
                </form>
                <br />

                <button class="btn btn-primary mb-2" type="button" @onclick=@createHTML>Create HTML</button>
                <button class="btn btn-primary mb-2" type="button" @onclick=@createPDF>Create PDF</button>
                <button onclick="generatePDF()">Generate PDF using jsPDF</button>
                <button type="button" @onclick="DownloadPdf">Generate</button>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Removes given product from Creator Service
    /// </summary>
    private void removeProduct(DataRetriever.Models.ProductsDataModel product)
    {
        CreatorService.RemoveProduct(product);
    }

    private void createPDF()
    {
        PdfCreator.CreateHtml(FileService.HTML(CreatorService, ImageService, false));
        //var bytes = System.Text.Encoding.UTF8.GetBytes("test");
        //Task.Run(() => this.SaveAsPDF(JSRuntime, "Offer.pdf", bytes, FileService.GenerateHTML(CreatorService)));
    }

    public async Task SaveAsPDF(IJSRuntime js, string filename, byte[] data, string d)
    {
        await js.InvokeAsync<object>(
            "generatePDFFF", d);
    }

    async Task DownloadPdf()
    {
        await using var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "../HtmlToPdf.js");

        // Generate and download the PDF
        await module.InvokeVoidAsync("generateAndDownloadPdf", FileService.HTML(CreatorService, ImageService, false), "sample.pdf");

        // Generate the PDF and get its content as byte[] (need .NET 6 to support Uint8Array)
        var bytes = await module.InvokeAsync<byte[]>("generatePdf", FileService.HTML(CreatorService, ImageService, false));
    }

    /// <summary>
    /// Creates PDF file with given product in the Creator Service
    /// </summary>
    private void createHTML()
    {
        //string html = string.Empty;
        //html += "<p>Test</p> <br /> <h3>Test H3</h3>";

        //MarkupString markupString = new MarkupString(html);

        //var file = FileFactory.FetchFileCollectionObject();
        //if (file.CreateHTML())
        //{
        //    this.filePath = "../html/" + file.Id.ToString() + ".html";
        //    FileFactory.RetrievePoolObject(file);
        //}

        //string fileName = "file.html";
        //string content = "te";
        //JSRuntime.InvokeAsync<object>("saveFile", fileName, content);

        this.DownloadHTMLFile();
    }

    void DownloadHTMLFile()
    {
        //var bytes = System.Text.Encoding.UTF8.GetBytes(FileService.GenerateHTML(CreatorService));
        var bytes = System.Text.Encoding.UTF8.GetBytes(FileService.HTML(CreatorService, ImageService, true));
        Task.Run(() => this.SaveAs(JSRuntime, "Offer.html", bytes));
    }

    public async Task SaveAs(IJSRuntime js, string filename, byte[] data)
    {
        await js.InvokeAsync<object>(
            "saveAsFile",
            filename,
            Convert.ToBase64String(data));
    }
}
